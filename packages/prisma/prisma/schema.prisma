// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                String    @id @default(cuid())
  name              String    @unique // set from mal
  mal_id            Int       @unique
  mal_access_token  String    @db.MediumText
  mal_refresh_token String    @db.MediumText()
  picture           String
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  deleted_at        DateTime?

  sessions    sessions[]
  anime_users anime_users[]
}

enum Status {
  WATCHING
  COMPLETED
  PLAN_TO_WATCH
  DROPPED
  ON_HOLD
}

enum AiringStatus {
  FINISHED
  RELEASING
  NOT_YET_RELEASED
  CANCELLED
  HIATUS
}

model animes {
  id            Int          @unique
  english_title String?
  romaji_title  String
  status        AiringStatus

  picture    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  season      String?
  season_year Int?

  related_animes anime_relations[] @relation("related_anime")
  base_animes    anime_relations[] @relation("base_anime")

  anime_users anime_users[]
}

enum Relation {
  ADAPTATION
  PREQUEL
  SEQUEL
  PARENT
  SIDE_STORY
  CHARACTER
  SUMMARY
  ALTERNATIVE
  SPIN_OFF
  OTHER
  SOURCE
  COMPILATION
  CONTAINS
}

model anime_relations {
  base_anime       animes @relation("base_anime", fields: [base_anime_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  base_anime_id    Int
  related_anime    animes @relation("related_anime", fields: [related_anime_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  related_anime_id Int

  relation Relation

  @@id([base_anime_id, related_anime_id])
}

model anime_users {
  user_id        String
  anime_id       Int
  status         Status   @default(PLAN_TO_WATCH)
  watch_priority Int      @default(0) // 0 = not set
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  user   users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  animes animes? @relation(fields: [anime_id], references: [id])

  @@id([user_id, anime_id])
  @@index([user_id], name: "user_id")
  @@index([anime_id], name: "anime_id")
}

model sessions {
  id         String   @id
  user_id    String
  expires_at DateTime
  created_at DateTime @default(now())

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([user_id], name: "user_id")
}
